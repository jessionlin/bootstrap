标签：

<small>副标签
<strong>加粗
<em><i>斜体
<ul>无序列表
<ol>有序列表
<dl><dt>定义列表
<dl><dt><dd>调整了行间距，外边距以及<dt>字体加粗效果
使用<code></code>来显示单行内联代码
使用<pre></pre>来显示多行块代码
使用<kbd></kbd>来显示用户输入代码
在<button>中添加<span>元素，并定义为caret类


属性:
disabled：禁用某控件,如果fieldset设置了disabled属性，整个域都将处于被禁用状态。
对于整个禁用的域中，如果legend中有输入框的话，这个输入框是无法被禁用的


类：（<p class="">）
.lead强调
.text-muted：提示，使用浅灰色（#999）
.text-primary：主要，使用蓝色（#428bca）
.text-success：成功，使用浅绿色(#3c763d)
.text-info：通知信息，使用浅蓝色（#31708f）
.text-warning：警告，使用黄色（#8a6d3b）
.text-danger：危险，使用褐色（#a94442）
.text-left：左对齐
.text-center：居中对齐
.text-right：右对齐
.text-justify：两端对齐
.list-unstyled:去除项目符号
.list-inline:水平列表，且去掉项目符号，保持水平显示(主要用于ul)
.dl-horizontal:给定义列表视线水平线时效果
.pre-scrollable:控制代码块区域最大高度为340px，一旦超出这个高度，就会在Y轴出现滚动条
.table：基础表格
.table-striped：斑马线表格
.table-bordered：带边框的表格
.table-hover：鼠标悬停高亮的表格
.table-condensed：紧凑型表格
.table-responsive：响应式表格

.active:表示当前活动的信息  #f5f5f5
.success:表示成功或者正确的行为  #dff0d8
.info:表示中立的信息或行为	#d9edf7
.warning:表示警告，需要特别注意	#fcf8e3
.danger:表示危险或者可能是错误的行为  #f2dede  
注：除了”.active”之外，其他四个类名和”.table-hover”配合使用时，
Bootstrap针对这几种样式也做了相应的悬浮状态的样式设置，所以如果需要
给tr元素添加其他颜色样式时，在”.table-hover”表格中也要做相应的调整。

.table:
给表格设置了margin-bottom:20px以及设置单元内距 
在thead底部设置了一个2px的浅灰实线
每个单元格顶部设置了一个1px的浅灰实线

.table-striped:增添斑马线功能
.table-bordered:增添一跳1px的边框
.table-hover:悬浮高亮效果
.table-condensed:单元格没内距或者内距较其他表格的内距更小只是将单元格的内距由8px调至5px
.table-responsive:当你的浏览器可视区域小于768px时，表格底部会出现水平滚动条。当你的浏
览器可视区域大于768px时，表格底部水平滚动条就会消失
.form-control:宽度变成了100% 设置了一个浅灰色（#ccc）的边框
具有4px的圆角 设置阴影效果，并且元素得到焦点之时，阴影和边框效果会有所变化
设置了placeholder的颜色为#999（用于表单元素，并不非得是table，form）
.form-horizontal:（用于form标签）设置表单控件padding和margin值。 改变“form-group”
的表现形式，类似于网格系统的“row”
.form-inline:将表单的空间都在一行内显示，用于form 但对tr无效
.sr-only:将标签隐藏
.group:赋予一个范围内的一组元素相同的属性
.form-control:让控件在各种表单风格中样式不出错
.multiple:Bootstrap框架中的下拉选择框使用和原始的一致，多行选择设置multiple属性的值为multiple
.form-control:宽度为100%或auto(textarea)
.checkbox,.radio:主要借助“.checkbox”和“.radio”样式，来处理复选框、单选按钮与标签的对齐方式
.checkbox-inline:如果checkbox需要水平排列，只需要在label标签上添加类名“checkbox-inline”
.radio-inline:如果radio需要水平排列，只需要在label标签上添加类名“radio-inline”
.input-sm:让控件比正常大小更小
.input-lg:让控件比正常大小更大 注:适用于表单中的input，textarea和select控件。
.focus:删除了outline的默认样式，重新添加阴影效果。
.form-control:要让控件在焦点状态下有上面样式效果，需要给控件添加类名“form-control”
.has-warning:警告状态（黄色）
.has-error：错误状态（红色）
.has-success：成功状态（绿色）
.has-feedback:如果你想让表单在对应的状态下显示 icon 出来，只需要在对应的状态下添加类名“has-feedback”。
还需要分别添加<span class="glyphicon glyphicon-ok form-control-feedback"></span>
 <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span>
 <span class="glyphicon glyphicon-remove form-control-feedback"></span> 
以上四个需要在form-group上使用
.help-block:将提示的信息以块状显示
.help-inline:将上述信息在控件后水平显示
.btn:基本按钮 ， 可用在多种标签上，不过建议在button和a上使用
.btn-block:使按钮充满整个容器，同时.btn也是不可或缺的
.active:正在点击状态
用disabled属性或者类都可以禁用按钮

1、img-responsive：响应式图片，主要针对于响应式设计
2、img-rounded：圆角图片
3、img-circle：圆形图片
4、img-thumbnail：缩略图片
上述属性只需在<img>标签后添加class即可，同时可用alt调整图片的大小
.glyphicon:在Bootstrap框架中是通过给元素添加“glyphicon”类名来实现，然后通过伪
元素“:before”的“content”属性调取对应的icon编码：如<span class="glyphicon glyphicon-search"></span>
.row:数据行处理，即每行的数据
.container:.row必须在.contain内以便为其赋予合适的对齐方式和内距。
、在行(.row)中可以添加列(.column)，但列数之和不能超过平分的总列数，
具体内容应当放置在列容器（column）之内，而且只有列（column）才可以作为行容器(.row)的直接子元素
、通过设置内距（padding）从而创建列与列之间的间距。然后通过为第一列和最后一列设置负值的外距（margin）来抵消内距(padding)的影响
。col-md-offset-*：”(其中星号代表要偏移的列组合数)，那么具有这个类名的列就会向右偏移。
不过有一个细节需要注意，使用”col-md-offset-*”对列进行向右偏移时，要保证列与偏移列的总数不超过12，不然会致列断行显
.col-md-push .col-md-pull:添加类名“col-md-push-*”和“col-md-pull-*” (其中星号代表移动的列组合数)。
.dropdown:包裹整个下拉菜单元素
.dropdown-menu:下拉列表使用的一个ul列表
使用了一个<button>按钮做为父菜单，并且定义类名“dropdown-toggle”和自定义“data-toggle”属性，且值必须和最外容器类名一致，此示例为:
data-toggle="dropdown"
.divider：在li标签内用作分割线功能
.dropdown-header:下拉菜单的部分标题
.pull-right，.dropdown-menu-right:下拉菜单右对齐，
.dropdown-menu-right:下拉菜单左对齐，两者都需要在dropdown-menu后使用
.hover:默认下拉列表状态为悬浮态
.active:默认下拉列表状态为活跃态
.disabled:默认下拉列表状态为禁用态
.focus:默认下拉列表状态为焦点态
.btn-toolba:一个储存控件的容器
.btn-group-lg:大按钮组
.btn-group-sm:小按钮组
.btn-group-xs:超小按钮组,,这3个需要与.btn-group同时使用
.btn-group-vertical:按钮垂直分组
.btn-group-justified:等分按钮，也称自适应分组按钮，在".btn-group"后追加即可
在制作等分按钮组时，请尽量使用<a>标签元素来制作按钮，因为使用<button>标签元素时，使用display:table在部分浏览器下支持并不友好。
.dropup:使下拉列表向上弹出，使用时只需将其追加在"btn-group"后，（当然，如果是普通向上弹出下拉菜单，
你只需要在“dropdown”类名基础上追加“dropup”类名即可）
.nav:导航，并需要在之后加上.nav-tabs或者.nav-pills之类
.nav-tabs:标签形导航，需要在.nav之后使用。将菜单项块状显示，并且让他们在同一水平上排列，然后定义非高亮菜单的样式和鼠标悬浮效果
如果想让某一项为当前选中项，只需再起标签上添加类名"class=active"。
如果想让某一项为禁用项，只需再起标签上添加类名"class=disabled"。
.nav-pills:胶囊形导航，其用法与.nav-tabs相同
.nav-stacked:在.nav-pills后使用，用来表示垂直排列按钮
.nav-divider:在li元素中添加分隔符
.nav-justified：自定义导航，需要与.nav-tabs或.nav-pills同时使用
.breadcrumb:使用方式就很简单，为ol加入breadcrumb类
.navbar:在导航条(navbar)中有一个背景色、而且导航条可以是纯链接（类似导航），也可以是表单，还有就是表单和导航一起结合等多种形式
在导航条(navbar)中有一个背景色、而且导航条可以是纯链接（类似导航），也可以是表单，还有就是表单和导航一起结合等多种形式
.navbar-nav,.navbar-default:在制作一个基础导航条时，主要分以下几步：
第一步：首先在制作导航的列表(<ul class=”nav”>)基础上添加类名“navbar-nav”
第二步：在列表外部添加一个容器（div），并且使用类名“navbar”和“navbar-default”
.navbar-header,.navbar-brand:添加导航条标题
.navbar-form:在navbar容器中放置一个带有navbar-form类名的表单，
.navbar-left,.navbar-right:表单左浮动
.navbar-btn:导航条中的按钮
.navbar-text:导航条中的文本
.navbar-link:导航条中的普通链接
这三种样式在框架中使用时受到一定的限制，需要和navbar-brand、navbar-nav配合起来使用。而且对数量也有一定的限制，
一般情况在使用一到两个不会有问题，超过两个就会有问题。
.navbar-fixed-top：导航条固定在浏览器窗口顶部
.navbar-fixed-bottom：导航条固定在浏览器窗口底部.使用时把固定导航条都放在页面内容前面，可以解决
页面主内容顶部和底部都被固定导航条给遮住了的问题
响应式导航:使用方法：
1、保证在窄屏时需要折叠的内容必须包裹在带一个div内，
并且为这个div加入collapse、navbar-collapse两个类名。最后为这个div添加一个class类名或者id名。
2、保证在窄屏时要显示的图标样式（固定写法）：
<button class="navbar-toggle" type="button" data-toggle="collapse">
  <span class="sr-only">Toggle Navigation</span>
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
</button>
3、并为button添加data-target=".类名/#id名"，究竞是类名还是id名呢？由需要折叠的div来决定。如：
需要折叠的div代码段：
<div class="collapse navbar-collapse" id="example">
      <ul class="nav navbar-nav">
      …
      </ul>
</div>
.navbar-inverse:反色导航条，
.pagination:在Bootstrap框架中使用的是ul>li>a这样的结构，在ul标签上加入pagination方法
.pagination-lg:让分页导航变大
.pagination-sm:让分页导航变小
在实际使用中，翻页分页导航和带页码的分页导航类似，为ul标签加入pager类：
<ul class="pager">
   <li><a href="#">&laquo;上一页</a></li>
   <li><a href="#">下一页&raquo;</a></li>
</ul>
.previous：让“上一步”按钮居左
.next：让“下一步”按钮居右
和带页码分页导航一样，如果在li标签上添加了disabled类名的时候，分页按钮处于禁用状态，但同样不能禁止其点击功能。你可以通过js来处理，或将a标签换成span标签。
<ul class="pager">
  <li class="disabled"><span>&laquo;上一页</span></li>
  <li><a href="#">下一页&raquo;</a></li>
</ul>
和按钮元素button类似，label样式也提供了多种颜色：
label-deafult:默认标签，深灰色
label-primary：主要标签，深蓝色
label-success：成功标签，绿色
label-info：信息标签，浅蓝色
label-warning：警告标签，橙色
label-danger：错误标签，红色
.badge:用在span内，显示徽章效果
.thumbnail:缩略图在网站中最常用的地方就是产品列表页面，一行显示几张图片，有的在图片底下（左侧或右侧）带有标题、描述等信息。Bootstrap框架将这一部独立成一个模块组件
通过“thumbnail”样式配合bootstrap的网格
系统来实现。
.caption:为缩略图配合标题、描述内容、按钮等
.alert-success:成功警示框：告诉用用户操作成功，在“alert”样式基础上追加“alert-success”样式，具体呈现的是背景、边框和文本都是绿色；
.alert-into信息警示框：给用户提供提示信息，在“alert”样式基础上追加“alert-info”样式，具体呈现的是背景、边框和文本都是浅蓝色；
.alert-warning警告警示框：提示用户小心操作（提供警告信息），在“alert”样式基础上追加“alert-warning”样式，具体呈现的是背景、边框、文本都是浅黄色；
.alert-danger错误警示框：提示用户操作错误，在“alert”样式基础上追加“alert-danger”样式，具体呈现的是背景、边框和文本都是浅红色。
具体使用的时候，可以在类名为“alert”的div容器里放置提示信息。实现不同类型警示框，只需要在“alert”基础上追加对应的类名
  关闭警示框:
只需要在默认的警示框里面添加一个关闭按钮。然后进行三个步骤：
1、需要在基本警示框“alert”的基础上添加“alert-dismissable”样式。
2、在button标签中加入class="close"类，实现警示框关闭按钮的样式。
3、要确保关闭按钮元素上设置了自定义属性：“data-dismiss="alert"”（因为可关闭警示框需要借助于Javascript来检测该属性，从而控制警示框的关闭）
<button class="close" data-dismiss="alert" type="button">&times;</button>
警示框中加入链接地址:
    <a href="#" class="alert-link">Change a few things up</a>
Bootstrap框架是通过给警示框加的链接添加一个名为“alert-link”的类名，通过“alert-link”样式给链接提供高亮显示。
进度条基本样式:
Bootstrap框架中也是按这样的方式实现的，他提供了两个容器，外容器使用“progress”样式，子容器使用“progress-bar”样式。其中progress用来设置进度条的容器样式，而progress-bar用于限制进度条的进度。使用方法非常的简单：

<div class="progress">
       <div class="progress-bar" style="width:40%"></div>
</div>
1、role属性作用：告诉搜索引擎这个div的作用是进度条。
2、aria-valuenow="40"属性作用：当前进度条的进度为40%。
3、aria-valuemin="0"属性作用：进度条的最小值为0%。
4、aria-valuemax="100"属性作用：进度条的最大值为100%。
彩色进度条：
.progress-bar-info：表示信息进度条，进度条颜色为蓝色
.progress-bar-success：表示成功进度条，进度条颜色为绿色
.progress-bar-warning：表示警告进度条，进度条颜色为黄色
.progress-bar-danger：表示错误进度条，进度条颜色为红色
<div class="progress-bar progress-bar-info" style="width:60%"></div>
.progress-striped:条纹进度条
.active:要让条纹进度条动起来，就需要让“progress-striped”和“active”同时运用，不然条纹进度条是不具备动效效果。
<h5>正常层叠进度条</h5>
<div class="progress">
    <div class="progress-bar progress-bar-success" style="width:20%"></div>
    <div class="progress-bar progress-bar-info" style="width:10%"></div>
    <div class="progress-bar progress-bar-warning" style="width:30%"></div>
    <div class="progress-bar progress-bar-danger" style="width:15%"></div>
</div> 
<h5>不良效果层叠进度条</h5> 
<div class="progress">
	<div class="progress-bar progress-bar-success" style="width:20%"></div>
	<div class="progress-bar progress-bar-info" style="width:40%"></div>
	<div class="progress-bar progress-bar-warning" style="width:30%"></div>
	<div class="progress-bar progress-bar-danger" style="width:45%"></div>
</div> 
<h5>层叠条纹进度条</h5>
<div class="progress">
	<div class="progress-bar progress-bar-success" style="width:20%"></div>
	<div class="progress-bar progress-bar-info" style="width:20%"></div>
	<div class="progress-bar progress-bar-warning" style="width:30%"></div>
	<div class="progress-bar progress-bar-danger" style="width:15%"></div>
</div>  
<div class="progress">
	<div class="progress-bar progress-bar-success progress-bar-striped" style="width:20%"></div>
	<div class="progress-bar progress-bar-info progress-bar-striped" style="width:20%"></div>
	<div class="progress-bar progress-bar-striped progress-bar-warning" style="width:30%"></div>
	<div class="progress-bar progress-bar-danger progress-bar-striped" style="width:15%"></div>
</div> 
<div class="progress">
	<div class="progress-bar progress-bar-success" style="width:20%"></div>
	<div class="progress-bar progress-bar-info progress-bar-striped" style="width:20%"></div>
	<div class="progress-bar progress-bar-warning" style="width:30%"></div>
	<div class="progress-bar progress-bar-danger progress-bar-striped" style="width:15%"></div>
</div> 
带label的进度条：
<div class="progress">
    <div class="progress-bar progress-bar-success"  role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width:20%">20%</div>  
</div>  
媒体对象：
媒体对像的容器：常使用“media”类名表示，用来容纳媒体对象的所有内容
媒体对像的对象：常使用“media-object”表示，就是媒体对象中的对象，常常是图片
媒体对象的主体：常使用“media-body”表示，就是媒体对像中的主体内容，可以是任何元素，常常是图片侧边内容
媒体对象的标题：常使用“media-heading”表示，就是用来描述对象的一个标题，此部分可选
.pull-right:将媒体控件置于右端。
Bootstrap框架提供了一个列表展示的效果，在写结构的时候可以使用ul，并且在ul上添加类名“media-list”，而在li上使用“media”，
.list-group：列表组容器，常用的是ul元素，当然也可以是ol或者div元素
.list-group-item：列表项，常用的是li元素，当然也可以是div元素
添加徽章:只需要在“list-group-item”中添加徽章组件“badge”：
需要列表项的任何区域都具备可点击：就是将ul.list-group使用div.list-group来替换，而li.list-group-item直接用a.list-group-item来替换。
.list-group-item-heading：用来定义列表项头部样式
.list-group-item-text：用来定义列表项主要内容
.list-group-item-success：成功，背景色绿色
.list-group-item-info：信息，背景色蓝色
.list-group-item-warning：警告，背景色为黄色
.list-group-item-danger：错误，背景色为红色
<div class="list-group">
    <a href="##" class="list-group-item list-group-item-success">性能优化之PHP优化<span class="badge">10</span></a>
    <a href="##" class="list-group-item list-group-item-info">Canvas绘图详解<span class="badge">3</span></li>
    <a href="##" class="list-group-item list-group-item-warning">玩转Bootstrap<span class="badge">0</span></a>
    <a href="##" class="list-group-item list-group-item-danger">基于bootstrap的网页开发<span class="badge">22</span></a>
</div>
面板：
基础面板非常简单，就是一个div容器运用了“panel”样式，产生一个具有边框的文本显示块。由于“panel”不控制主题颜色，所以在“panel”的基础上增加一个控制颜色
的主题“panel-default”，另外在里面添加了一个“div.panel-body”来放置面板主体内容：
<div class="panel panel-default">
    <div class="panel-body">我是一个基础面板，带有默认主题样式风格</div>
</div>
.panel-heading：用来设置面板头部样式
.panel-footer：用来设置面板尾部样式
panel样式并没有对主题进行样式设置，而主题样式是通过panel-default来设置。
.panel-primary：重点蓝
.panel-success：成功绿
.panel-info:信息蓝
.panel-warning：警告黄
.panel-danger：危险红
例：
<div class="panel panel-info">
	<div class="panel-heading">图解CSS3</div>
	<div class="panel-body">详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性</div>
	<div class="panel-footer">作者：大漠</div>
</div>
在使用面板的时候，都会在panel-body放置需要的内容，可能是图片、表格或者列表等。
动画过渡效果:
模态弹出窗（Modal）的滑动和渐变效果；
选项卡（Tab）的渐变效果；
警告框（Alert）的渐变效果；
图片轮播（Carousel）的滑动效果。
Bootstrap框架中的模态弹出框，分别运用了“modal”、“modal-dialog”和“modal-content”样式，而弹出窗真正的内容都放置在“modal-content”中，其主要又包括三个部分：
弹出框头部，一般使用“modal-header”表示，主要包括标题和关闭按钮
弹出框主体，一般使用“modal-body”表示，弹出框的主要内容
弹出框脚部，一般使用“modal-footer”表示，主要放置操作按钮
声明式触发方法：

方法一：模态弹出窗声明，只需要自定义两个必要的属性：data-toggle和data-target（bootstrap中声明式触发方法一般依赖于这些自定义的data-xxx 属性。比如data-toggle="" 或者 data-dismiss=""）。例如：
<!-- 触发模态弹出窗的元素 -->
<button type="button" data-toggle="modal" data-target="#mymodal" class="btn btn-primary">点击我会弹出模态弹出窗</button>
<!-- 模态弹出窗 -->
<div class="modal fade" id="mymodal">
    <div class="modal-dialog">
        <div class="modal-content">
        <!-- 模态弹出窗内容 -->
        </div>
    </div>
</div>
1、data-toggle必须设置为modal(toggle中文翻译过来就是触发器)；
2、data-target可以设置为CSS的选择符，也可以设置为模态弹出窗的ID值，一般情况设置为模态弹出窗的ID值，因为ID值是唯一的值。
方法二：触发模态弹出窗也可以是一个链接<a>元素，那么可以使用链接元素自带的href属性替代data-target属性，如：
<!-- 触发模态弹出窗的元素 -->
<a data-toggle="modal" href="#mymodal" class=" btn btn-primary" >点击我会弹出模态弹出窗</a>
<!-- 模态弹出窗 -->
<div class="modal fade"  id="mymodal" >
    <div class="modal-dialog" >
        <div class="modal-content" >
        <!-- 模态弹出窗内容 -->
        </div>
    </div>
</div>
data-dismiss 是一个定制的 HTML5 data 属性。用于关闭模态窗口。
可通过给“.modal”增加类名“fade”为模态弹出框增加一个过渡动画效果。
modal-body 是 Bootstrap 的一个 CSS class，用于设置模态窗口主体的样式。
modal-footer 是 Bootstrap 的一个 CSS class，用于设置模态窗口尾部的样式。
CSS class btn 和 btn-success 用于在模态窗口的尾部创建一个大号的按钮。您可以使用任何其他 Bootstrap 按钮代替。
/********************************/
$('#myModal').on('hidden.bs.modal', function (e) {
    // 处理代码...
})